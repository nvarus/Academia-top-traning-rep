/* Так как задачи для третьей домашки я уже сдал как ДЗ-2, что бы не сдавать то же самое, решил задачи из методички № 4 */

// * 1. Написать функцию, которая принимает 2 числа и возвращает меньшее из них.
const minNum = (a, b) => a < b ? a : b;

// * 2. Написать функцию, которая возводит переданное число в указанную степень.
const exp = (num, n = 2) => num ** n;

/*
* 3. Написать функцию, которая принимает 2 числа и знак (+ - * /),
*    считает пример и возвращает результат. */
const calc = (a, b, sign) => {
	switch (sign) {
		case '+':
			return a + b;
		case '-':
			return a - b;
		case '*':
			return a * b;
		case '/':
			return a / b;
		case '**':
			return a ** b;
		case '%':
			return a % b;
	}
}

//* 4. Написать функцию, которая проверяет, является ли переданное ей число простым.
const primeNum = (num) => {
	if (num === 1) return 'one'
	// что бы проверить простоту числа достаточно проверить делители от 2 до квадратного корня из этого числа
	for (let i = 2; i <= Math.sqrt(num); i++) {
		if (num % i == 0) return 'not-prime';
	}
	return 'prime';
}

/*
* 5. Написать функцию, которая принимает число и выводит таблицу умножения для этого числа.
*    Вызовите функцию для всех чисел от 2 до 9. */
const multi = (N) => {
	for (let i = 1; i <= 10; i++) {
		console.log(`${N} * ${i} = ${N * i}`);
	}
	return `Таблица умножения на число ${N}`;
}
// вызывает функцию multy для всех чисел от 2 до 9
const callMulti = () => {
	for (let i = 2; i <= 9; i++) console.log(multi(i));
}


/* 6. Написать функцию, которая реализует работу оператора %. Функция принимает 2 параметра и возвращает остаток от
*  деления первого параметра на второй. В функции использовать только + - * /, оператор % не использовать. */
const getRem = (x, y) => {
	if (y === 0) return NaN;
	// переменная для перебора чисел
	let i = 1;
	// результат умножения делителя на i, нужно найти максимально возможный d
	let d = y;	// изначально равен y
	while (d <= x) {
		// z является потенциальным остатком от деления, если в следующую итерацию
		// d превысит x и цикл прервется, значение z останется  как остаток
		z = x - d;
		i++;			// увеличиваем i на единицу
		d = i * y;	// получаем d, что бы сравнить с x на следующем шаге
	}
	return z;
}


// 7. Написать функцию, которая принимает от 1 до 5 чисел и возвращает их сумму.
function summ() {
	// если аргументов больше 5 или меньше 1, возвращаем ошибку
	if (arguments.length > 5) return console.error('too many arguments');
	else if (arguments.length === 0) return console.error('no arguments');
	s = 0;
	// обходим аргументы с помощью цикла for of и складываем все аргументы
	for (let arg of arguments) s += arg;
	return s;
}

/*
* 8. Написать функцию, которая принимает от 1 до 5 чисел и возвращает большее из них. */

function maximum() {
	if (arguments.length > 5) return console.error('too many arguments');
	else if (arguments.length === 0) return console.error('no arguments');
	max = arguments[0]; // max равен первому аргументу
	// обходим аргументы с помощью цикла for of и если находим аргумент больше предыдущего, записываем в max
	for (let arg of arguments) max = (arg > max) ? arg : max;
	return max;
}

/* 9. Написать функцию, которая выводит все четные или нечетные числа, в указанном пользователем диапазоне. Какие
числа выводить, определяется третьим параметром типа bool (true – четные, false – нечетные). */

function evenOrOdd(start, stop, type) {
	/* два случая, когда надо измнить вывод. 1) когда начинаем с четной, а надо выводить нечетные и 2) когда начинаем с нечетной,
		а надо выводить четные. В остальных случаях не меняем */
	if (start % 2 == 0 && type == false || start % 2 != 0 && type == true) start++;
	for (let i = start; i <= stop; i += 2) {
		console.log(i);
	}
}

/* 10. Написать функцию, которая принимает дату (день, месяц,год) и возвращает дату следующего дня в виде строки
«дд.мм.гггг». Проверку на високосный год желательно написать отдельной функцией */

// функция, определяющая количство дней в месяце
function getDayPerMonth(month, year) {
	// четыре месяца по 30 дней
	if (month == 4 || month == 6 || month == 9 || month == 11) return 30;
	else if (month == 2) {		// если февраль
		// определяем високосный год
		if (year % 400 == 0) return 29;			// если кратный 400 - високосный
		else if (year % 100 == 0) return 28; 	// иначе, если кратный 100 - невисокосный
		else if (year % 4 == 0) return 29;		// иначе, если кратный 4 - високосный
		else return 28;								// остальные невисокосные
	}
	else return 31;	// остальные месяцы 31 день
}
// функция, возвращающая следующий день
function getData(day, month, year) {
	dayPerMonth = getDayPerMonth(month, year);
	// если последний день года
	if (day == dayPerMonth && month == 12) {
		day = 1;
		month = 1;
		year++;
		// если последний день месяца
	} else if (day == dayPerMonth) {
		day = 1;
		month++;
		// остальные дни
	} else day++;

	return `${String(day).padStart(2, '0')}.${String(month).padStart(2, '0')}.${year}`;
}
