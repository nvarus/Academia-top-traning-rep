// 'use strict'
//* Создать объект, описывающий прямоугольник (хранит координаты левой верхней и правой нижней точек)
const rect = new Object({
	A: {
		x: 20,
		y: 60,
	},

	B: {
		x: 50,
		y: 10,
	},
});

//* 1. Функция принимает объект-прямоугольник и выводит информацию о нем (где какая точка расположена)
rect.Info = function () {
	for (let i in rect) {
		if (typeof rect[i] === 'function') continue;
		console.log(`Координаты точки ${i}: (${rect[i].x}, ${rect[i].y})`)
	}
}

//* 2. Функция принимает объект-прямоугольник и возвращает его ширину
rect.Width = () => rect.B.x - rect.A.x;

//* 3. Функция принимает объект-прямоугольник и возвращает его высоту.
rect.Height = () => rect.A.y - rect.B.y;

//* 4. Функция принимает объект-прямоугольник и возвращает его площадь.
rect.Area = () => rect.Width() * rect.Height();

//* 5. Функция принимает объект-прямоугольник и возвращает его периметр.
rect.Perimetr = () => (rect.Width() + rect.Height()) * 2;

//* 6. Функция изменения ширины прямоугольника. Она принимает
//* объект-прямоугольник и на сколько единиц изменить ширину.
rect.changeWidth = (change) => rect.B.x += change;

//* 7. Функция изменения высоты прямоугольника. Она принимает
//* объект-прямоугольник и на сколько единиц изменить высоту.
rect.changeHeight = (change) => rect.A.y += change;

//* 8. Функция изменения ширины и высоты прямоугольника. Она принимает объект-прямоугольник
//* и два значения – для изменения ширины и высоты
rect.changeSize = (width, height) => {
	rect.changeWidth(width);
	rect.changeHeight(height);
}

//* 9. Функция смещения прямоугольника по оси X. Она принимает объект-прямоугольник
//* и на сколько единиц его сдвинуть.
rect.shiftX = (sX) => {
	rect.A.x += sX;
	rect.B.x += sX;
}

//* 10. Функция смещения прямоугольника по оси Y. Она принимает объект-прямоугольник
//* и на сколько единиц его сдвинуть.
rect.shiftY = (sY) => {
	rect.A.y += sY;
	rect.B.y += sY;
}

//* 11. Функция смещения прямоугольника и по оси X и по оси Y. Она принимает 
//* объект-прямоугольник и два значения: сдвиг по оси X и сдвиг по оси Y.
rect.shift = (sX, sY) => {
	rect.shiftX(sX);
	rect.shiftY(sY);
}

//* 12. Функция для проверки, находится ли точка внутри прямоугольника. Она принимает
//* объект-прямоугольник и координаты точки.
rect.belongs = (X, Y) => (X >= rect.A.x && X <= rect.B.x) && (Y >= rect.B.y && Y <= rect.A.y) ? true : false;